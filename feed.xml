<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-12-16T10:17:24+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Fachidiot DevLog</title><subtitle>iOS Developer Playground</subtitle><entry><title type="html">개인적인 기대 게임들</title><link href="http://localhost:4000/fav" rel="alternate" type="text/html" title="개인적인 기대 게임들" /><published>2021-12-15T22:18:00+09:00</published><updated>2021-12-15T22:18:00+09:00</updated><id>http://localhost:4000/fav</id><content type="html" xml:base="http://localhost:4000/fav">&lt;p&gt;도깨비도 기대가 되지만
최근 로스트아크에 좀 재미가 붙어서
붉은사막도 굉장히 기대가 된다.&lt;/p&gt;</content><author><name>fachidiot</name></author><category term="game" /><summary type="html">도깨비도 기대가 되지만 최근 로스트아크에 좀 재미가 붙어서 붉은사막도 굉장히 기대가 된다.</summary></entry><entry><title type="html">Git 기본 사용법(1) 시작하기</title><link href="http://localhost:4000/git-command" rel="alternate" type="text/html" title="Git 기본 사용법(1) 시작하기" /><published>2021-12-14T21:00:00+09:00</published><updated>2021-12-14T21:00:00+09:00</updated><id>http://localhost:4000/git-command</id><content type="html" xml:base="http://localhost:4000/git-command">&lt;p&gt;Fourscore and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.&lt;/p&gt;

&lt;p&gt;Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altogether fitting and proper that we should do this.&lt;/p&gt;

&lt;p&gt;But, in a larger sense, we can not dedicate-we can not consecrate-we can not hallow-this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us-that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion-that we here highly resolve that these dead shall not have died in vain-that this nation, under God, shall have a new birth of freedom-and that government of the people, by the people, for the people shall not perish from the earth.&lt;/p&gt;</content><author><name>fachidiot</name></author><category term="git" /><summary type="html">Fourscore and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.</summary></entry><entry><title type="html">Git 기본 사용법(1) 시작하기</title><link href="http://localhost:4000/git-basic" rel="alternate" type="text/html" title="Git 기본 사용법(1) 시작하기" /><published>2021-12-14T21:00:00+09:00</published><updated>2021-12-14T21:00:00+09:00</updated><id>http://localhost:4000/git-basic</id><content type="html" xml:base="http://localhost:4000/git-basic">&lt;p&gt;Fourscore and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.&lt;/p&gt;

&lt;p&gt;Now we are engaged in a great civil war, testing whether that nation, or any nation so conceived and so dedicated, can long endure. We are met on a great battle-field of that war. We have come to dedicate a portion of that field, as a final resting place for those who here gave their lives that that nation might live. It is altogether fitting and proper that we should do this.&lt;/p&gt;

&lt;p&gt;But, in a larger sense, we can not dedicate-we can not consecrate-we can not hallow-this ground. The brave men, living and dead, who struggled here, have consecrated it, far above our poor power to add or detract. The world will little note, nor long remember what we say here, but it can never forget what they did here. It is for us the living, rather, to be dedicated here to the unfinished work which they who fought here have thus far so nobly advanced. It is rather for us to be here dedicated to the great task remaining before us-that from these honored dead we take increased devotion to that cause for which they gave the last full measure of devotion-that we here highly resolve that these dead shall not have died in vain-that this nation, under God, shall have a new birth of freedom-and that government of the people, by the people, for the people shall not perish from the earth.&lt;/p&gt;</content><author><name>fachidiot</name></author><category term="git" /><summary type="html">Fourscore and seven years ago our fathers brought forth on this continent, a new nation, conceived in Liberty, and dedicated to the proposition that all men are created equal.</summary></entry><entry><title type="html">이번주 내 포트폴리오</title><link href="http://localhost:4000/portfolio" rel="alternate" type="text/html" title="이번주 내 포트폴리오" /><published>2021-11-16T18:24:00+09:00</published><updated>2021-11-16T18:24:00+09:00</updated><id>http://localhost:4000/portfolio</id><content type="html" xml:base="http://localhost:4000/portfolio">&lt;p&gt;하이닉스&lt;/p&gt;

&lt;p&gt;삼성전자&lt;/p&gt;</content><author><name>fachidiot</name></author><category term="economy" /><summary type="html">하이닉스</summary></entry><entry><title type="html">iOS TIL (2) - Flow Control</title><link href="http://localhost:4000/ios-flowcontrol" rel="alternate" type="text/html" title="iOS TIL (2) - Flow Control" /><published>2021-10-26T16:44:00+09:00</published><updated>2021-10-26T16:44:00+09:00</updated><id>http://localhost:4000/ios-flowcontrol</id><content type="html" xml:base="http://localhost:4000/ios-flowcontrol">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;iOS Today I Learn!&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-playground&quot;&gt;iOS TIL (1) - Playground&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-flowcontrol&quot;&gt;iOS TIL (2) - Flow Control&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-function&quot;&gt;iOS TIL (3) - Function&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-optional&quot;&gt;iOS TIL (4) - Optional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;function&quot;&gt;Function&lt;/h3&gt;
&lt;p&gt;기능을 수행하는 코드 블럭 { … } = Method&lt;/p&gt;

&lt;p&gt;Object에 속해 기능을 수행한다.&lt;/p&gt;

&lt;p&gt;Function은 Object없이도 독립적으로 호출이 된다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;functionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lparam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParamType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReturnType&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;returnreturnValue&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;함수에-변수-넣기&quot;&gt;함수에 변수 넣기&lt;/h3&gt;

&lt;p&gt;C++이나 C언어의 포인터 처럼 사용할 수 있다. inout 키워드를 사용함으로써&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;incrementAndPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;함수에-함수-넣기&quot;&gt;함수에 함수 넣기&lt;/h3&gt;

&lt;p&gt;일반 함수를 var 타입으로 참조하여 받아와준다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 일반 함수&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;substract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;substract&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;함수를-사용할때&quot;&gt;함수를 사용할때&lt;/h3&gt;

&lt;p&gt;함수는 길게 말고 짧게 만들자…
길게 만들게 되어도 쪼개는 연습을 하자!&lt;/p&gt;</content><author><name>fachidiot</name></author><category term="ios" /><summary type="html">iOS Today I Learn! iOS TIL (1) - Playground iOS TIL (2) - Flow Control iOS TIL (3) - Function iOS TIL (4) - Optional</summary></entry><entry><title type="html">iOS TIL (4) - Optional</title><link href="http://localhost:4000/ios-optional" rel="alternate" type="text/html" title="iOS TIL (4) - Optional" /><published>2021-10-25T15:30:00+09:00</published><updated>2021-10-25T15:30:00+09:00</updated><id>http://localhost:4000/ios-optional</id><content type="html" xml:base="http://localhost:4000/ios-optional">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;iOS Today I Learn!&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-playground&quot;&gt;iOS TIL (1) - Playground&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-flowcontrol&quot;&gt;iOS TIL (2) - Flow Control&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-function&quot;&gt;iOS TIL (3) - Function&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-optional&quot;&gt;iOS TIL (4) - Optional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;optional&quot;&gt;Optional&lt;/h3&gt;

&lt;p&gt;존재하지 않는 값과 존재하는 값 모두를 표현해주는 표식이다 (코틀린과 유사)
    즉, 값이 있을 수도 있고 없을 수도 있는 상태 이며 없는 상태는 nil로 표현 된다
    ‘?’ 를 타입 뒤에 붙여줌으로 선언해준다.
    값을 사용할땐 변수 뒤에 ! 를 붙여줌으로써 Forced unwrapping해준다.&lt;/p&gt;

&lt;h4 id=&quot;optional의-주요-4가지-기능들&quot;&gt;Optional의 주요 4가지 기능들&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Forced unwrapping &amp;gt; 억지로 박스를 까는것 		
만약 nil상태에서 실행하려 하면 error가 난다. 
EXC_BAD_INSTRUCTION&lt;/li&gt;
  &lt;li&gt;Optional binding (if let) &amp;gt; 부드럽게 박스를 까는것&lt;/li&gt;
  &lt;li&gt;Optional binding (guard) &amp;gt; ==&lt;/li&gt;
  &lt;li&gt;Nil coalescing &amp;gt; 박스를 까봤더니, 값이 없으면 디폴트 값을 준다&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;forced-unwrapping&quot;&gt;Forced Unwrapping&lt;/h4&gt;
&lt;p&gt;Optional 변수 뒤에 !를 붙여주어 &lt;strong&gt;&lt;em&gt;강제&lt;/em&gt;&lt;/strong&gt;로 값에 접근한다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;carName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;if-letoptional-binding&quot;&gt;If let(optional binding)&lt;/h4&gt;
&lt;p&gt;If let 을 이용해 안전하게 optional값을 이용한다.&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unwrappedCarName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrappedCarName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Car Name 은 없다...&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;’,’ 콤마를 사용하면 여러 변수를 받아서 binding 가능 
또한 ,(콤마)를 사용하여 조건 지정 또한 가능&lt;/p&gt;
&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;If&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unwrappedCarName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unwrappedCarName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isNotEmpty&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;…&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;guardoptional-binding&quot;&gt;Guard(optional binding)&lt;/h4&gt;
&lt;p&gt;If let과 비슷하지만 if let 의 단점인 코드의 복잡성을 비교적 보완해줄수 있는 optional binding 방법이다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printParsedInt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;guard&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;letparsedInt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Int로 컨버팅 불가&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
     &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
     &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parsedInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;printParsedInt2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;nil-coalescing&quot;&gt;Nil coalescing&lt;/h4&gt;
&lt;p&gt;’??’ 키워드를 이용해서 만약 nil값일때를 대비한 예비 변수를 넣어둔다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;carName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;nil&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;myCarName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;??&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;모델 S&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// if carName == nil  =&amp;gt;  myCarName = &quot;모델 S&quot;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// else myCarName = carName&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;optional-chaining&quot;&gt;Optional Chaining&lt;/h4&gt;
&lt;p&gt;? 키워드를 이용해서 옵셔널의 속성에 접근하는 과정을 줄여준다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;isEmptyArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isEmpty&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// array가 nil일땐&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Array?까지 실행되며 nil을 반환한다.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// array가 빈 배열일땐&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Array?.isEmpty까지 실행되며 true를 반환한다. 	&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// array에 요소가 있을땐&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Array?.isEmpty까지 실행되며 false를 반환한다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;번외&quot;&gt;번외&lt;/h4&gt;
&lt;p&gt;Implicitly Unwrapped Optional (암묵적으로 벗겨진 옵셔널) 옵셔널 선언시에 ? 대신 ! 를 사용함으로
접근할때 ! 키워드 없이, binding 과정 없이 접근이 가능하다.
하지만 그럴수록 오류에 더 조심해야하므로 잘 쓰진 않는다고 한다.&lt;/p&gt;</content><author><name>fachidiot</name></author><category term="ios" /><summary type="html">iOS Today I Learn! iOS TIL (1) - Playground iOS TIL (2) - Flow Control iOS TIL (3) - Function iOS TIL (4) - Optional</summary></entry><entry><title type="html">iOS TIL (3) - Function</title><link href="http://localhost:4000/ios-function" rel="alternate" type="text/html" title="iOS TIL (3) - Function" /><published>2021-10-23T09:18:00+09:00</published><updated>2021-10-23T09:18:00+09:00</updated><id>http://localhost:4000/ios-function</id><content type="html" xml:base="http://localhost:4000/ios-function">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;iOS Today I Learn!&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-playground&quot;&gt;iOS TIL (1) - Playground&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-flowcontrol&quot;&gt;iOS TIL (2) - Flow Control&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-function&quot;&gt;iOS TIL (3) - Function&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-optional&quot;&gt;iOS TIL (4) - Optional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;function&quot;&gt;Function&lt;/h3&gt;
&lt;p&gt;기능을 수행하는 코드 블럭 { … } = Method&lt;/p&gt;

&lt;p&gt;Object에 속해 기능을 수행한다.&lt;/p&gt;

&lt;p&gt;Function은 Object없이도 독립적으로 호출이 된다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;Func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;functionName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Lparam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ParamType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;ReturnType&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;     
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;returnreturnValue&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;함수에-변수-넣기&quot;&gt;함수에 변수 넣기&lt;/h3&gt;

&lt;p&gt;C++이나 C언어의 포인터 처럼 사용할 수 있다. inout 키워드를 사용함으로써&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;incrementAndPrint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;inout&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;함수에-함수-넣기&quot;&gt;함수에 함수 넣기&lt;/h3&gt;

&lt;p&gt;일반 함수를 var 타입으로 참조하여 받아와준다.&lt;/p&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// 일반 함수&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;substract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;substract&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;함수를-사용할때&quot;&gt;함수를 사용할때&lt;/h3&gt;

&lt;p&gt;함수는 길게 말고 짧게 만들자…
길게 만들게 되어도 쪼개는 연습을 하자!&lt;/p&gt;</content><author><name>fachidiot</name></author><category term="ios" /><summary type="html">iOS Today I Learn! iOS TIL (1) - Playground iOS TIL (2) - Flow Control iOS TIL (3) - Function iOS TIL (4) - Optional</summary></entry><entry><title type="html">iOS TIL (1) - Swift Playground</title><link href="http://localhost:4000/ios-playground" rel="alternate" type="text/html" title="iOS TIL (1) - Swift Playground" /><published>2021-10-21T12:07:00+09:00</published><updated>2021-10-21T12:07:00+09:00</updated><id>http://localhost:4000/ios-playground</id><content type="html" xml:base="http://localhost:4000/ios-playground">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;iOS Today I Learn!&lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-playground&quot;&gt;iOS TIL (1) - Playground&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-flowcontrol&quot;&gt;iOS TIL (2) - Flow Control&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-function&quot;&gt;iOS TIL (3) - Function&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;./ios-optional&quot;&gt;iOS TIL (4) - Optional&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;간단한 Swift 코드를 테스트 할 수 있다.
페어 프로그램겸 간단한 테스트기라고 할 수 있겠다.&lt;/p&gt;

&lt;p&gt;오늘은 간단하게 예제와 함께 Playground를 살펴봐야겠다.&lt;/p&gt;

&lt;h3 id=&quot;keyword&quot;&gt;Keyword&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Var: 타입 변경이 가능한 변수 타입 (const정도로 알아두자)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Let: 타입 변경이 불가능한 변수 타입 (kotlin이 따라한듯?)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Comment: 주석으로 //로 같다. ⌘ + /&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Tuple: 여려가지 타입의 값들을 저장해주는 배열&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-swift highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tuple&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.45&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;tuple2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tuple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// B = B - A    Cannot assign to value: &apos;B&apos; is a &apos;let&apos; constant&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;function&quot;&gt;Function&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Arc4random_uniform (범위) 랜덤 함수&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;String Interpolation: String에 변수 넣을 땐 (변수)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;flow-control&quot;&gt;Flow Control&lt;/h2&gt;
&lt;p&gt;코드의 흐름을 조절해주는 도구들&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;If else&lt;/li&gt;
  &lt;li&gt;while loop&lt;/li&gt;
  &lt;li&gt;for loop&lt;/li&gt;
  &lt;li&gt;swifth statement&lt;/li&gt;
  &lt;li&gt;etc…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While 과 Repeat while의 차이&lt;/p&gt;

&lt;p&gt;While은 조건 -&amp;gt; 코드 수행 이지만,
Repeat while은 코듣수행 -&amp;gt; 조건이다.&lt;/p&gt;

&lt;h2 id=&quot;scope&quot;&gt;Scope()&lt;/h2&gt;
&lt;p&gt;코드블럭 안에 있는 모든 것&lt;/p&gt;

&lt;p&gt;{ Scope }&lt;/p&gt;</content><author><name>fachidiot</name></author><category term="ios" /><summary type="html">iOS Today I Learn! iOS TIL (1) - Playground iOS TIL (2) - Flow Control iOS TIL (3) - Function iOS TIL (4) - Optional</summary></entry><entry><title type="html">Android 시작하기 - (1) Android Studio 설치하기</title><link href="http://localhost:4000/android-start" rel="alternate" type="text/html" title="Android 시작하기 - (1) Android Studio 설치하기" /><published>2021-08-23T13:39:00+09:00</published><updated>2021-08-23T13:39:00+09:00</updated><id>http://localhost:4000/android-start</id><content type="html" xml:base="http://localhost:4000/android-start">&lt;p&gt;Android Studio 설치하기&lt;/p&gt;</content><author><name>fachidiot</name></author><category term="android" /><summary type="html">Android Studio 설치하기</summary></entry></feed>